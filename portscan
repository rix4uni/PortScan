#!/bin/bash

# Set default value
list="subs.txt"
threads="5000"
ratelimit="0"
status_code="200,204,301,302,307,401,403,405,500"
port_mode="NmapTop100"

function NmapTop100() {
    ffuf -c -w $list:HOST -w default-port-list/NmapTop100.txt:PORT -u HOST:PORT -v -t $threads -rate $ratelimit -mc $status_code -o NmapTop100-output.json
    cat NmapTop100-output.json | jq -r '.results[].url' | unew -q NmapTop100-output-final.txt && rm -rf NmapTop100-output.json
}

function NmapTop1000() {
    ffuf -c -w $list:HOST -w default-port-list/NmapTop1000.txt:PORT -u HOST:PORT -v -t $threads -rate $ratelimit -mc $status_code -o NmapTop1000-output.json
    cat NmapTop1000-output.json | jq -r '.results[].url' | unew -q NmapTop1000-output-final.txt && rm -rf NmapTop1000-output.json
}

function Full() {
    ffuf -c -w $list:HOST -w default-port-list/Full.txt:PORT -u HOST:PORT -v -t $threads -rate $ratelimit -mc $status_code -o Full-output.json
    cat Full-output.json | jq -r '.results[].url' | unew -q Full-output-final.txt && rm -rf Full-output.json
}

function Favourite() {
    ffuf -c -w $list:HOST -w default-port-list/Favourite.txt:PORT -u HOST:PORT -v -t $threads -rate $ratelimit -mc $status_code -o Favourite-output.json
    cat Favourite-output.json | jq -r '.results[].url' | unew -q Favourite-output-final.txt && rm -rf Favourite-output.json
}

# COLORS
BLUE='\033[0;34m'
BBLUE='\033[1;34m'
BYELLOW='\033[1;33m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
RESET='\033[0m'
VERSION="PortScan v1.1"

banner(){
    echo -e "${GREEN}
\t\t ____  _____  ____  ____  ___   ___    __    _  _ 
\t\t(  _ \(  _  )(  _ \(_  _)/ __) / __)  /__\  ( \( )
\t\t )___/ )(_)(  )   /  )(  \__ \( (__  /(__)\  )  ( 
\t\t(__)  (_____)(_)\_) (__) (___/ \___)(__)(__)(_)\_)
\t\t${VERSION}                    coded by ${YELLOW}@rix4uni${RED} in INDIA${RESET}"
}

function print_usage(){
    banner
    echo -e "${GREEN}TARGET OPTIONS:${RESET}"
    echo -e "   -l, -list, string            list of hosts to scan ports (file)"
    echo -e "   -tp, -top-ports, string      top ports to scan (default 100) [100,1000,Full,Favourite]"
    echo -e "   -t, -threads int             number of threads to use (default 5000)"
    echo -e "   -rl, -rate-limit int         maximum requests to send per second (default 150)"
    echo -e "   -sc, -status-code            display response status-code"
    echo -e "   -h, --help                   display help"
    echo -e ""
    echo -e "${GREEN}USAGE EXAMPLES:${RESET}"
    echo -e "   ${BYELLOW}portscan -l subs.txt -top-ports 100 -t 5000 -rl 1000 -sc 200,301,302,401,403${RESET}"
    echo -e "   ${BYELLOW}portscan -l subs.txt -p - -t 5000 -rl 1000 -sc 200,301,302,401,403${RESET}"
    echo -e "   ${BYELLOW}portscan -l subs.txt -favourite -t 5000 -rl 1000 -sc 200,301,302,401,403${RESET}"
    echo -e ""
    exit 0
}

# Parse the arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
    	-h) print_usage ;;
        -top-ports|-tp)
            shift
            case "$1" in
                100) port_mode="NmapTop100" ;;
                1000) port_mode="NmapTop1000" ;;
                *) echo "Invalid option for -top-ports. Use 100 or 1000." ;;
            esac
            ;;
        -p)
            if [[ "$2" == "-" ]]; then
                port_mode="Full"
                shift  # Shift extra for the "-"
            else
                echo "Invalid option for -p. Use '-' for full ports scan."
                exit 1
            fi
            ;;
        -favourite)
            port_mode="Favourite"
            ;;
        -l|-list) list="$2"; shift ;;
        -t|-threads) threads="$2"; shift ;;
        -rl|-rate-limit) ratelimit="$2"; shift ;;
        -sc|-status_code) status_code="$2"; shift ;;
        *) print_usage; exit 1 ;;
    esac
    shift
done

# Call the selected mode function
$port_mode
